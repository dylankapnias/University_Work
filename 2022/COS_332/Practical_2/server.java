import java.io.*;
import java.net.*;
import java.util.Scanner;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class server {
    
    public static void main(String[] args) {
        ServerSocket socket = null;

        try {
            try{
                socket = new ServerSocket(1070);
                while (true) {
                    Socket in_connection = socket.accept();
                    System.out.println("Spawning connection");
                    new connection(in_connection).start();
                }
            } catch(Exception e) {
                e.printStackTrace();
            } finally {
                socket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static class connection extends Thread {
        private Socket client;
        private PrintStream write_out;

        private final byte[] hourglass = {
            0x2B, 0x3D, 0x3D, 0x3D, 0x3D, 0x2B, 0x0A, 0x7C, 0x28, 0x3A, 0x3A,
            0x29, 0x7C, 0x0A, 0x7C, 0x20, 0x29, 0x28, 0x20, 0x7C, 0x0A, 0x7C,
            0x28, 0x2E, 0x2E, 0x29, 0x7C, 0x0A, 0x2B, 0x3D, 0x3D, 0x3D, 0x3D,
            0x2B
        };
        private final byte[] hourglass_rev = {
            0x2B, 0x3D, 0x3D, 0x3D, 0x3D, 0x2B, 0x0A, 0x7C, 0x28, 0x2E, 0x2E,
            0x29, 0x7C, 0x0A, 0x7C, 0x20, 0x29, 0x28, 0x20, 0x7C, 0x0A, 0x7C,
            0x28, 0x3A, 0x3A, 0x29, 0x7C, 0x0A, 0x2B, 0x3D, 0x3D, 0x3D, 0x3D,
            0x2B
        };
        private final byte[] prog_name = {
            0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5F,
            0x20, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x0A, 0x7C, 0x20, 0x20, 0x5F,
            0x5F, 0x5F, 0x7C, 0x20, 0x20, 0x20, 0x20, 0x28, 0x5F, 0x29, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x7C, 0x20, 0x5F,
            0x5F, 0x5F, 0x20, 0x5C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
            0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20,
            0x20, 0x20, 0x0A, 0x7C, 0x20, 0x7C, 0x5F, 0x20, 0x20, 0x5F, 0x20,
            0x5F, 0x5F, 0x20, 0x20, 0x5F, 0x20, 0x20, 0x20, 0x5F, 0x5F, 0x5F,
            0x20, 0x20, 0x5F, 0x20, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x5F,
            0x5F, 0x7C, 0x20, 0x7C, 0x7C, 0x20, 0x7C, 0x5F, 0x2F, 0x20, 0x2F,
            0x20, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x20, 0x20, 0x20, 0x5F, 0x5F,
            0x5F, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x5F, 0x5F, 0x0A, 0x7C,
            0x20, 0x20, 0x5F, 0x7C, 0x7C, 0x20, 0x27, 0x5F, 0x5F, 0x7C, 0x7C,
            0x20, 0x7C, 0x20, 0x2F, 0x20, 0x5F, 0x20, 0x5C, 0x7C, 0x20, 0x27,
            0x5F, 0x20, 0x5C, 0x20, 0x20, 0x2F, 0x20, 0x5F, 0x60, 0x20, 0x7C,
            0x7C, 0x20, 0x5F, 0x5F, 0x5F, 0x20, 0x5C, 0x20, 0x2F, 0x20, 0x5F,
            0x20, 0x5C, 0x20, 0x20, 0x2F, 0x20, 0x5F, 0x20, 0x5C, 0x20, 0x7C,
            0x20, 0x7C, 0x2F, 0x20, 0x2F, 0x0A, 0x7C, 0x20, 0x7C, 0x20, 0x20,
            0x7C, 0x20, 0x7C, 0x20, 0x20, 0x20, 0x7C, 0x20, 0x7C, 0x7C, 0x20,
            0x20, 0x5F, 0x5F, 0x2F, 0x7C, 0x20, 0x7C, 0x20, 0x7C, 0x20, 0x7C,
            0x7C, 0x20, 0x28, 0x5F, 0x7C, 0x20, 0x7C, 0x7C, 0x20, 0x7C, 0x5F,
            0x2F, 0x20, 0x2F, 0x7C, 0x20, 0x28, 0x5F, 0x29, 0x20, 0x7C, 0x7C,
            0x20, 0x28, 0x5F, 0x29, 0x20, 0x7C, 0x7C, 0x20, 0x20, 0x20, 0x3C,
            0x20, 0x0A, 0x5C, 0x5F, 0x7C, 0x20, 0x20, 0x7C, 0x5F, 0x7C, 0x20,
            0x20, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x5C, 0x5F, 0x5F, 0x5F, 0x7C,
            0x7C, 0x5F, 0x7C, 0x20, 0x7C, 0x5F, 0x7C, 0x20, 0x5C, 0x5F, 0x5F,
            0x2C, 0x5F, 0x7C, 0x5C, 0x5F, 0x5F, 0x5F, 0x5F, 0x2F, 0x20, 0x20,
            0x5C, 0x5F, 0x5F, 0x5F, 0x2F, 0x20, 0x20, 0x5C, 0x5F, 0x5F, 0x5F,
            0x2F, 0x20, 0x7C, 0x5F, 0x7C, 0x5C, 0x5F, 0x5C
        };

        connection(Socket s) {
            this.client = s;
        }

        public void clear(PrintStream out, int row, int col) {
            out.println(String.format("\u001B[%d;%dH\u001B[0J", row, col));
        }

        public void load_splash(PrintStream out) {
            try {
                out.println("\u001B[2J");
                out.print("\u001B[H");
                out.println("Loading Database...");

                out.println("\u001B[?25l\u001B[2;0H\u001B[1;36m");
                for (int i = 0; i < 4; i++) {
                    out.println(new String(hourglass));
                    Thread.sleep(500);
                    out.println("\u001B[2;0H\u001B[0J");
                    out.println(new String(hourglass_rev));
                    Thread.sleep(500);
                    out.println("\u001B[2;0H\u001B[0J");
                }
            } catch (Exception e) {}

            out.println("\u001B[1;32mDatabase successfully loaded");
            out.println("\u001B[?25h\u001B[0m");
        }

        public void load_name(PrintStream out) {
            out.println("\u001B[H\u001B[1;35m\u001B[0J");
            out.println(new String(prog_name));
            out.println("\u001B[0m");
        }

        @Override
        public void run() {
            try {
                try {
                    InputStream input_stream = client.getInputStream();
                    OutputStream output_stream = client.getOutputStream();

                    Scanner inScan = new Scanner(input_stream);
                    write_out = new PrintStream(output_stream, true);
                    String inString = "";
                    String name = "Client> ";

                    //write_out.println("\u001B[1;31m" + name);
                    //write_out.println("\u001B[11;39m");

                    load_splash(write_out);
                    Thread.sleep(1000);
                    load_name(write_out);

                    //inString = inScan.nextLine();

                    //write_out.println(inString);

                    inScan.close();
                    write_out.close();
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    client.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
